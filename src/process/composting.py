# Composting process
# Authors: Christian OTTINI, Felipe BUENDIA
import numpy as np
import matplotlib.pyplot as plt

# Parameters for the biological processes 
mu_max = 0.1       # maximum specific growth rate 
K_s = 10           # Monod constant (substrate concentration at half of mu_max) (g/L)
S_0 = 200          # Initial substrate concentration (g/L)
X_0_mesophile = 0.5   # Initial mesophiles concentration (g/L)
X_0_thermophile = 0.5 # Initial thermophiles concentration (g/L)
death_rate_mesophile = 0.0005   # Death rate constant of mesophiles (per hour)
death_rate_thermophile = 0.0005 # Death rate constant of thermophiles (per hour)
T_opt_mesophile = 30   # Optimal temperature for mesophiles (degrees Celsius)
T_opt_thermophile = 50 # Optimal temperature for thermophiles (degrees Celsius)
sigma_mesophile = 1    # Narrowed width of the temperature range for mesophiles (degrees Celsius) to limit growth
sigma_thermophile = 10  # Width of the temperature range for thermophiles (degrees Celsius)

# Parameters for the energy balance 
k1 = 50  # Increased heat generation constant (J/g°C) to favor faster temperature rise
k2 = 30   # Heat loss constant (J/g°C)
C_p = 11.5  # Specific heat capacity of the composting material in J/(g°C)
m = 1000  # Mass of the composting material in grams
T_amb = 20  # Ambient temperature in °C

# Initial conditions
T0 = 30  # Initial temperature of the composting pile in °C, closer to mesophiles optimal

# Time points
t_max = 800         # Maximum time (hours)
dt = 0.1            # Time step size (hours)
t = np.arange(0, t_max, dt)

# Arrays to store substrate, biomass, and temperature over time
S = np.zeros_like(t)
X_mesophile = np.zeros_like(t)
X_thermophile = np.zeros_like(t)
T = np.zeros_like(t)

# Initial conditions
S[0] = S_0
X_mesophile[0] = X_0_mesophile
X_thermophile[0] = X_0_thermophile
T[0] = T0

# Temperature-dependent growth limitation factor function
def temp_factor(T, T_opt, sigma):
    return np.exp(-((T - T_opt)**2) / (2 * sigma**2))

# Simulation loop
for i in range(1, len(t)):
    # Mesophiles
    mu_mesophile = mu_max * temp_factor(T[i-1], T_opt_mesophile, sigma_mesophile) * S[i-1] / (K_s + S[i-1])
    dX_mesophile_dt = (mu_mesophile - death_rate_mesophile * X_mesophile[i-1]) * X_mesophile[i-1]

    # Thermophiles
    mu_thermophile = mu_max * temp_factor(T[i-1], T_opt_thermophile, sigma_thermophile) * S[i-1] / (K_s + S[i-1])
    dX_thermophile_dt = (mu_thermophile - death_rate_thermophile * X_thermophile[i-1]) * X_thermophile[i-1]

    # Update substrate concentration
    dS_dt = - (mu_mesophile * X_mesophile[i-1] + mu_thermophile * X_thermophile[i-1])

    # Update biomass concentrations
    S[i] = S[i-1] + dS_dt * dt
    X_mesophile[i] = X_mesophile[i-1] + dX_mesophile_dt * dt
    X_thermophile[i] = X_thermophile[i-1] + dX_thermophile_dt * dt

    # Update temperature based on microbial activity
    Q_gen = k1 * (X_mesophile[i] + X_thermophile[i])  # Heat generated by both populations
    Q_loss = k2 * (T[i-1] - T_amb)
    dT_dt = (Q_gen - Q_loss) / (m * C_p)
    T[i] = T[i-1] + dT_dt * dt

# Plotting
fig, ax1 = plt.subplots(figsize=(10, 8))

# Substrate plot
color = 'tab:blue'
ax1.set_xlabel('Time (h)')
ax1.set_ylabel('Soluble Substrate', color=color)
ax1.plot(t, S, label='Soluble Substrate', color=color)
ax1.tick_params(axis='y', labelcolor=color)

# Microorganisms plot
ax2 = ax1.twinx()
color = 'tab:green'
ax2.set_ylabel('Microorganisms ( - green & -. yellow)')
ax2.plot(t, X_mesophile, label='Mesophilic bacteria', linestyle='--', color=color)
ax2.plot(t, X_thermophile, label='Thermophilic bacteria', linestyle='-.', color='orange')
ax2.tick_params(axis='y')

# Temperature plot
ax3 = ax1.twinx()
color = 'tab:red'
ax3.spines['right'].set_position(('outward', 60))
ax3.set_ylabel('Temperature (°C)', color=color)
ax3.plot(t, T, label='Temperature (°C)', color=color)
ax3.tick_params(axis='y', labelcolor=color)

fig.tight_layout()
plt.title('Tools for a badass PhD', fontsize=16)
plt.subplots_adjust(top=0.9)
fig.legend(loc='center')
plt.grid(True)
plt.show()
